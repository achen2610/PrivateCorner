//
//  LockScreenModels.swift
//  PrivateCorner
//
//  Created by a on 3/9/17.
//  Copyright (c) 2017 MrAChen. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//
//  Type "usecase" for some magic!

import UIKit
import Foundation

struct LockScreenScene {

    enum PasscodeState {
        case FirstStart
        case NotFirst
        case SecondInput
        case ChangePass
        case RequirePass
    }
}

public protocol LockScreenViewModelDelegate: class {
    func validationSuccess()
    func validationFail()
    func setInputDotCount(inputDotCount: Int)
    func setTitleLabel(text: String)
    func setTitleButton(text: String)
}

open class LockScreenViewModel {
    
    var passcodeState: LockScreenScene.PasscodeState?
    var inputDotCount: Int
    var totalDotCount: Int
    var passcodeSaved: String?
    weak var delegate: LockScreenViewModelDelegate?
    
    fileprivate var inputString: String = "" {
        didSet {
            inputDotCount = inputString.count
            delegate?.setInputDotCount(inputDotCount: inputDotCount)
            checkInputComplete()
        }
    }
    
    public init(delegate: LockScreenViewModelDelegate, totalDotCount: Int) {
        self.inputDotCount = 0
        self.totalDotCount = totalDotCount
        self.delegate = delegate
    }
    
    public init(initWhenChangePass delegate: LockScreenViewModelDelegate, totalDotCount: Int) {
        self.inputDotCount = 0
        self.totalDotCount = totalDotCount
        self.delegate = delegate
        passcodeSaved = ""
        passcodeState = .ChangePass
    }

    func appendInputString(string: String) {
        guard inputString.count < totalDotCount else {
            return
        }
        
        inputString += string
        
        if inputString.count > 0 {
            delegate?.setTitleButton(text: NSLocalizedString("Delete", comment: ""))
        }
    }
    
    func deleteInputString(isFull: Bool) {
        guard inputString.count > 0 && !isFull else {
            return
        }
        inputString = String(inputString.dropLast())
        
        if inputString.count == 0 && passcodeState == .SecondInput {
            delegate?.setTitleButton(text: NSLocalizedString("Reset", comment: ""))
        } else {
            delegate?.setTitleButton(text: NSLocalizedString("Delete", comment: ""))
        }
    }
    
    func resetInputString() {
        if passcodeState == .ChangePass {
            passcodeState = .NotFirst
            passcodeSaved = UserDefaults.standard.value(forKey: "passcodeSaved") as? String
            delegate?.setTitleLabel(text: NSLocalizedString("Enter passcode", comment: ""))
        } else {
            passcodeState = .FirstStart
            passcodeSaved = ""
            delegate?.setTitleLabel(text: NSLocalizedString("Enter the passcode", comment: ""))
        }
    }
    
    func checkInputComplete() {
        if inputString.count == totalDotCount {
            guard let passcodeState = passcodeState else {
                return
            }
            
            switch passcodeState {
            case .FirstStart:
                passcodeSaved = inputString
                self.passcodeState = .SecondInput
                
                delegate?.setTitleLabel(text: NSLocalizedString("Enter again the passcode", comment: ""))
                break
            case .SecondInput:
                if validation(inputString) {
                    UserDefaults.standard.set(passcodeSaved, forKey: "passcodeSaved")
                    UserDefaults.standard.set(true, forKey: "firstInstall")
                    UserDefaults.standard.synchronize()
                    
                    delegate?.validationSuccess()
                } else {
                    delegate?.setTitleLabel(text: NSLocalizedString("Wrong passcode. Try again", comment: ""))
                }
                break
            case .ChangePass:
                if passcodeSaved == "" {
                    passcodeSaved = inputString
                    delegate?.setTitleLabel(text: NSLocalizedString("Enter new passcode", comment: ""))
                } else {
                    if validation(inputString) {
                        UserDefaults.standard.set(passcodeSaved, forKey: "passcodeSaved")
                        UserDefaults.standard.synchronize()
                        delegate?.validationSuccess()
                    } else {
                        delegate?.setTitleLabel(text: NSLocalizedString("Wrong passcode. Try again", comment: ""))
                    }
                }
                break
            case .NotFirst, .RequirePass:
                if validation(inputString) {
                    print("*️⃣ success!")
                    delegate?.validationSuccess()
                } else {
                    print("*️⃣ failure!")
                    delegate?.validationFail()
                }
                break
            }
            clearInput()
        }
    }
    
    func clearInput() {
        inputString = ""
        delegate?.setInputDotCount(inputDotCount: 0)
    }
    
    func changePassState() {
        passcodeState = .ChangePass
        passcodeSaved = ""
    }
    
    func validation(_ input: String) -> Bool {
        return input == passcodeSaved
    }
}

