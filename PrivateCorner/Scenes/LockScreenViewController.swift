//
//  LockScreenViewController.swift
//  PrivateCorner
//
//  Created by a on 3/9/17.
//  Copyright (c) 2017 MrAChen. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//

import UIKit
import LocalAuthentication

class LockScreenViewController: UIViewController, LockScreenViewModelDelegate  {
    var buttonArray = [UIButton]()
    var viewModel: LockScreenViewModel!
    
    @IBOutlet weak var backgroundImageView: UIImageView!
    @IBOutlet weak var PasscodeView: PasscodeView!
    @IBOutlet weak var OneButton: UIButton!
    @IBOutlet weak var TwoButton: UIButton!
    @IBOutlet weak var ThreeButton: UIButton!
    @IBOutlet weak var FourButton: UIButton!
    @IBOutlet weak var FiveButton: UIButton!
    @IBOutlet weak var SixButton: UIButton!
    @IBOutlet weak var SevenButton: UIButton!
    @IBOutlet weak var EightButton: UIButton!
    @IBOutlet weak var NineButton: UIButton!
    @IBOutlet weak var ZeroButton: UIButton!
    @IBOutlet weak var TitleLabel: UILabel!
    @IBOutlet weak var CancelButton: UIButton!
    @IBOutlet weak var TouchIDButton: UIButton!
    
    // MARK: Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()

    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        styleUI()
        PasscodeView.totalDotCount = 6
        viewModel = LockScreenViewModel(delegate: self, totalDotCount: 6)
    }
    
    // MARK: Event handling
    
    private func styleUI() {
        backgroundImageView.image = UIImage.init(named: "data-security-tips.jpg")
        blurImage()
        TitleLabel.font = UIFont.boldSystemFont(ofSize: 17 * kScale)

        buttonArray.append(ZeroButton)
        buttonArray.append(OneButton)
        buttonArray.append(TwoButton)
        buttonArray.append(ThreeButton)
        buttonArray.append(FourButton)
        buttonArray.append(FiveButton)
        buttonArray.append(SixButton)
        buttonArray.append(SevenButton)
        buttonArray.append(EightButton)
        buttonArray.append(NineButton)

        for button in buttonArray {
            self.styleButton(button: button, isScaleFontSize: true)
            button.tag = buttonArray.index(of: button)!
        }
        styleButton(button: CancelButton, isScaleFontSize: false)
        styleButton(button: TouchIDButton, isScaleFontSize: false)
    }
    
    func styleChangePassState() {
        viewModel.clearInput()
        viewModel.changePassState()
        TitleLabel.text = "NHẬP MẬT KHẨU MỚI!"
        TouchIDButton.setTitle("Cancel", for: .normal)
    }
    
    private func blurImage() {
        if !UIAccessibilityIsReduceTransparencyEnabled() {
            backgroundImageView.backgroundColor = UIColor.clear
            
            let blurEffect = UIBlurEffect(style: UIBlurEffectStyle.dark)
            let blurEffectView = UIVisualEffectView(effect: blurEffect)
            //always fill the view
            blurEffectView.frame = backgroundImageView.bounds
            blurEffectView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
            
            backgroundImageView.addSubview(blurEffectView) //if you have more UIViews, use an insertSubview API to place it where needed
        }
    }
    
    private func styleButton(button: UIButton, isScaleFontSize: Bool) {
        if isScaleFontSize {
            button.titleLabel?.font = UIFont.boldSystemFont(ofSize: 20 * kScale)
        }
        button.layer.cornerRadius = 5.0;
        button.layer.borderColor = UIColor.white.cgColor
        button.layer.borderWidth = 1.0;
    }
    
    private func wrongPasscode() {
        PasscodeView.shakeAnimationWithCompletion {
            self.viewModel.clearInput()
            self.TitleLabel.text = "MẬT KHẨU SAI. THỬ LẠI !"
        }
    }
    
    // MARK: Navigation
    func navigateToHomeScreen() {
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        navigationController?.pushViewController(appDelegate.tabBarController, animated: true)
    }

    // MARK: Display logic
    
    
    // MARK: Selector logic
    @IBAction func clickedNumberButton(_ sender: Any) {
        let button = sender as! UIButton
        print("clicked \(button.tag) Button")
        viewModel.appendInputString(string: "\(button.tag)")
    }
    
    @IBAction func clickedCancelButton(_ sender: Any) {
        print("clicked Delete Button")
        if viewModel.passcodeState == .SecondInput && viewModel.inputDotCount == 0 {
            viewModel.resetInputString()
        } else {
            viewModel.deleteInputString(isFull: PasscodeView.isFull)
        }
    }
    
    @IBAction func clickedTouchIDButton(_ sender: Any) {
        if viewModel.passcodeState == .ChangePass {
            TouchIDButton.setTitle("TouchID", for: .normal)
            viewModel.resetInputString()
            navigateToHomeScreen()
            
            return
        }
        
        let context = LAContext()
        var error: NSError?
        let reasonString = "Authentication is needed to access your app."
        
        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {
            context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: reasonString, reply: { (success, evalPolicyError) in
                if success {
                    self.TitleLabel.text = "NHẬP MẬT KHẨU CỦA BẠN"
                    self.viewModel.clearInput()
                    self.navigateToHomeScreen()
                } else {
                    print("\(evalPolicyError?.localizedDescription ?? "")")
                    
                    var message : NSString
                    var showAlert : Bool
                    
                    switch evalPolicyError!._code {
                    case LAError.authenticationFailed.rawValue:
                        print("Authentication has a problem verifying your identity.")
                        message = "There was a problem verifying your identity."
                        showAlert = true
                        
                    case LAError.systemCancel.rawValue:
                        print("Authentication was cancelled by the system")
                        message = "Authentication was cancelled by the system."
                        showAlert = true
                        
                    case LAError.userCancel.rawValue:
                        print("Authentication was cancelled by the user")
                        message = "You pressed cancel."
                        showAlert = true
                        
                    case LAError.userFallback.rawValue:
                        print("User selected to enter custom password")
                        message = "You pressed password."
                        showAlert = true
                        
                    default:
                        print("Authentication failed")
                        message = "Touch ID may not be configured."
                        showAlert = true
                    }
                    
                    let alertView = UIAlertController(title: "Error", message: message as String, preferredStyle:.alert)
                    let okAction = UIAlertAction(title: "Darn!", style: .default, handler: nil)
                    alertView.addAction(okAction)
                    if showAlert {
                        self.present(alertView, animated: true, completion: nil)
                    }
                }
            })
        } else {
            // 5.
            let alertView = UIAlertController(title: "Error", message: "Touch ID not available" as String, preferredStyle:.alert)
            let okAction = UIAlertAction(title: "Darn!", style: .default, handler: nil)
            alertView.addAction(okAction)
            present(alertView, animated: true, completion: nil)
        }
    }
    

    // MARK: LockScreenViewModelDelegate
    func validationSuccess() {
        TitleLabel.text = "NHẬP MẬT KHẨU CỦA BẠN"
        viewModel.clearInput()
        navigateToHomeScreen()
    }
    
    func validationFail() {
        wrongPasscode()
    }
    
    func setInputDotCount(inputDotCount: Int) {
        PasscodeView.inputDotCount = inputDotCount
    }
    
    func setTitleLabel(text: String) {
        TitleLabel.text = text
    } 
    
    func setTitleButton(text: String) {
        CancelButton.setTitle(text, for: .normal)
    }
}


