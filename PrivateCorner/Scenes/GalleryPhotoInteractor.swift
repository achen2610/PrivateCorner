//
//  GalleryPhotoInteractor.swift
//  PrivateCorner
//
//  Created by a on 3/30/17.
//  Copyright (c) 2017 MrAChen. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//

import UIKit

protocol GalleryPhotoInteractorInput {
    func getGallery()
    func selectItem(request: GalleryPhotoScene.SelectItem.Request)
    func uploadPhoto(request: GalleryPhotoScene.UploadPhoto.Request)
}

protocol GalleryPhotoInteractorOutput {
    func presentGallery(response: GalleryPhotoScene.GetGalleryPhoto.Response)
}

protocol GalleryPhotoDataSource {
    var selectedItem:Item! { get }
}

protocol GalleryPhotoDataDestination {
    var album:Album! {get set}
}

class GalleryPhotoInteractor: GalleryPhotoInteractorInput, GalleryPhotoDataSource, GalleryPhotoDataDestination {
    
    var output: GalleryPhotoInteractorOutput!
    var selectedItem:Item!
    var album:Album!
    
    // MARK: Business logic
    
    func getGallery() {
        let items = album.mutableSetValue(forKey: "items")
        let dateDescriptor = NSSortDescriptor(key: "uploadDate", ascending: false)
        let array = items.sortedArray(using: [dateDescriptor]) as! [Item]

        let response = GalleryPhotoScene.GetGalleryPhoto.Response(gallery: array)
        output.presentGallery(response: response)
    }
    
    func selectItem(request: GalleryPhotoScene.SelectItem.Request) {
        selectedItem = request.item
        
        print("\(selectedItem)")
    }

    func uploadPhoto(request: GalleryPhotoScene.UploadPhoto.Request) {
        var items = [Item]()
        let images = request.images
        let filenames = request.filenames
        for image in images {
            let index = images.index(of: image)
            let filename = filenames[index!]
            let item = ItemManager.sharedInstance.add(image: image, filename: filename)
            items.append(item)
            
            let fileManager = FileManager.default
            let path = getDocumentsDirectory().appendingPathComponent(filename)
            if fileManager.fileExists(atPath: path.path) {
                print("File Exists")
            } else {
                if let data = UIImagePNGRepresentation(image) {
                    try? data.write(to: path)
                }
            }
        }
        
        
        let itemsInAlbum = album.mutableSetValue(forKey: "items")
        if itemsInAlbum.count > 0 {
            itemsInAlbum.addObjects(from: items)
        } else {
            album.addToItems(NSSet(array: items))
        }
        
        //1
        let managedContext = CoreDataManager.sharedInstance.managedObjectContext

        //2
        do {
            try managedContext.save()
        } catch let error as NSError {
            print("Could not save. \(error), \(error.userInfo)")
        }
        
        getGallery()
    }
    
    
    // MARK: Private Method
    private func getDocumentsDirectory() -> URL {
        let paths = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
        let documentsDirectory = paths[0]
        return documentsDirectory
    }
}
