//
//  AlbumsViewController.swift
//  PrivateCorner
//
//  Created by a on 3/15/17.
//  Copyright (c) 2017 MrAChen. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//

import UIKit

protocol AlbumsViewControllerInput {
    func displayAlbums(viewModel: AlbumsScene.GetAlbum.ViewModel)
    func addAlbumToList(viewModel: AlbumsScene.AddAlbum.ViewModel)
    func deleteAlbumFromList(index: Int)
}

protocol AlbumsViewControllerOutput {
    func getAlbum(request: AlbumsScene.GetAlbum.Request)
    func selectAlbum(request: AlbumsScene.SelectAlbum.Request)
    func addAlbum(request: AlbumsScene.AddAlbum.Request)
    func deleteAlbum(request: AlbumsScene.DeleteAlbum.Request)
}

class AlbumsViewController: UIViewController, AlbumsViewControllerInput {
    
    var output: AlbumsViewControllerOutput!
    var router: AlbumsRouter!
    var albums: [Album] = []
    var isEditMode: Bool = false
    
    @IBOutlet weak var albumsCollectionView: UICollectionView!
    
    // MARK: Object lifecycle
    
    struct cellIdentifiers {
        static let albumsCell = "albumsCell"
    }
    
    struct cellLayout {
        static let itemsPerRow: CGFloat = 2
        static let sectionInsets: UIEdgeInsets = UIEdgeInsets(top: 12, left: 12, bottom: 12, right: 12)
    }
    
    override func awakeFromNib() {
        super.awakeFromNib()
        AlbumsConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.title = "Album"
        configureCollectionViewOnLoad()
        getAlbumFromCoreData()
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: NSNotification.Name.UIKeyboardWillShow, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: NSNotification.Name.UIKeyboardWillHide, object: nil)
    }
    
    // MARK: Event handling
    
    func configureCollectionViewOnLoad() {
        let nibName = UINib(nibName: "AlbumsCell", bundle:Bundle.main)
        albumsCollectionView.register(nibName, forCellWithReuseIdentifier: cellIdentifiers.albumsCell)
    }
    
    func getAlbumFromCoreData() {
        let request = AlbumsScene.GetAlbum.Request()
        output.getAlbum(request: request)
    }
    
    func saveAlbumToCoreData(title: String) {
        let request = AlbumsScene.AddAlbum.Request(title: title)
        output.addAlbum(request: request)
    }
    
    func selectedGalleryAtIndex(index: Int) {
        let album = albums[index]
        let request = AlbumsScene.SelectAlbum.Request(album: album)
        output.selectAlbum(request: request)
        router.navigateToGalleryScreen()
    }
    
    @IBAction func addAlbumButtonItemTapped(_ sender: Any) {
        let alert = UIAlertController.init(title: "New Album", message: "Enter a name for this album", preferredStyle: .alert)
        alert.addTextField { (textField) in
            textField.keyboardType = .alphabet
            textField.placeholder = "Title"
        }
        
        let cancelAction = UIAlertAction.init(title: "Cancel", style: .cancel, handler: nil)
        alert.addAction(cancelAction)
        
        let saveAction = UIAlertAction.init(title: "Save", style: .default) { (action) in
            let textField = alert.textFields?.first
            self.saveAlbumToCoreData(title: (textField?.text)!)
        }
        alert.addAction(saveAction)

        self.present(alert, animated: true, completion: nil)
    }

    @IBAction func editAlbumButtonItemTapped(_ sender: Any) {
        if !isEditMode {
            isEditMode = true
            albumsCollectionView.reloadData()
            
            let barButton = UIBarButtonItem(barButtonSystemItem: .done, target: self, action: #selector(editAlbumButtonItemTapped(_:)))
            self.navigationItem.rightBarButtonItem = barButton
        } else {
            isEditMode = false
            albumsCollectionView.reloadData()
            
            let barButton = UIBarButtonItem(barButtonSystemItem: .edit, target: self, action: #selector(editAlbumButtonItemTapped(_:)))
            self.navigationItem.rightBarButtonItem = barButton
        }
    }
    
    func clickDeleteAlbum(button: UIButton) {
        let index = button.tag
        let album = albums[index]
        let request = AlbumsScene.DeleteAlbum.Request(album: album, index: index)
        output.deleteAlbum(request: request)
    }
    
    // MARK: Display logic
    func displayAlbums(viewModel: AlbumsScene.GetAlbum.ViewModel) {
        albums = viewModel.albums
        albumsCollectionView.reloadData()
    }
    
    func addAlbumToList(viewModel: AlbumsScene.AddAlbum.ViewModel) {
        let album = viewModel.album
        albumsCollectionView.performBatchUpdates({ 
            self.albums.insert(album, at: 0)
            self.albumsCollectionView.insertItems(at: [IndexPath.init(row: 0, section: 0)])
        }, completion: nil)
        
    }
    
    func deleteAlbumFromList(index: Int) {
        albumsCollectionView.performBatchUpdates({
            self.albums.remove(at: index)
            self.albumsCollectionView.deleteItems(at: [IndexPath(row: index, section: 0)])
            self.albumsCollectionView.reloadData()
        }, completion: nil)
    }
    
    // MARK: Keyboard Function
    func keyboardWillShow(notification: NSNotification) {
        let userInfo = notification.userInfo ?? [:]
        let keyboardFrame = (userInfo[UIKeyboardFrameBeginUserInfoKey] as! NSValue).cgRectValue
        let adjustmentHeight = keyboardFrame.height
        var contentInset:UIEdgeInsets = albumsCollectionView.contentInset
        contentInset.bottom = adjustmentHeight

        albumsCollectionView.contentInset = contentInset
        albumsCollectionView.scrollIndicatorInsets = contentInset
    }
    
    func keyboardWillHide(notification: NSNotification) {
        var contentInset:UIEdgeInsets = albumsCollectionView.contentInset
        contentInset.bottom = 49.0

        albumsCollectionView.contentInset = contentInset
        albumsCollectionView.scrollIndicatorInsets = contentInset
    }
}

//This should be on configurator but for some reason storyboard doesn't detect ViewController's name if placed there
extension AlbumsViewController: AlbumsPresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router.passDataToNextScene(for: segue)
    }
}


extension AlbumsViewController: UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        let index = textField.tag
        let indexPath = IndexPath(row: index, section: 0)
        albumsCollectionView.scrollToItem(at: indexPath, at: UICollectionViewScrollPosition.centeredHorizontally, animated: true)
    }
    
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        let index = textField.tag
        let album = albums[index]
        album.name = textField.text
        albums[index] = album
        
        //1
        let managedContext = CoreDataManager.sharedInstance.managedObjectContext

        //2
        do {
            try managedContext.save()
            print("saved!")
        } catch let error as NSError  {
            print("Could not save \(error), \(error.userInfo)")
        }
    }

}
