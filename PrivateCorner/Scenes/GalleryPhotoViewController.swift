//
//  GalleryPhotoViewController.swift
//  PrivateCorner
//
//  Created by a on 3/30/17.
//  Copyright (c) 2017 MrAChen. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//

import UIKit
import Photos
import DynamicColor

class GalleryPhotoViewController: UIViewController, GalleryPhotoViewModelDelegate {

//    let imagePickerController = ImagePickerController()
    var gallery: GalleryController!
    var viewModel: GalleryPhotoViewModel!
    var progressRing: UICircularProgressRingView!
    var isEditMode: Bool = false
    
    @IBOutlet weak var galleryCollectionView: UICollectionView!
    @IBOutlet weak var addPhotoButton: UIButton!
    @IBOutlet weak var toolBar: UIToolbar!
    @IBOutlet weak var bottomConstraintCollectionView: NSLayoutConstraint!
    
    // MARK: Object lifecycle
    
    struct cellIdentifiers {
        static let galleryCell = "galleryCell"
    }
    
    struct cellLayout {
        static let itemsPerRow: CGFloat = 3
        static let cellSize: CGSize = CGSize(width: kScreenWidth/CGFloat(itemsPerRow),
                                           height: kScreenWidth/CGFloat(itemsPerRow))
    }
    
    override func awakeFromNib() {
        super.awakeFromNib()

    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        isHeroEnabled = true
        
        styleUI()
        configureCollectionViewOnLoad()
        getGalleryPhotoOnLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

    }
    
    // MARK: Event handling
    func styleUI() {
        title = viewModel.titleAlbum

        var rect = toolBar.frame
        rect.origin.y += rect.size.height
        toolBar.frame = rect
        
        progressRing = UICircularProgressRingView(frame: CGRect(x: 0, y: 0, width: 150, height: 150))
        progressRing.center = view.center
        progressRing.isHidden = true
        // Change any of the properties you'd like
        let blue = UIColor(hexString: "#3498db")
        progressRing.outerRingColor = blue
        progressRing.outerRingWidth = 8.0
        progressRing.innerRingColor = blue.lighter()
        progressRing.innerRingSpacing = 0
        progressRing.fontColor = blue.lighter()
        view.addSubview(progressRing)
        
//        bottomConstraintCollectionView.constant = 49
    }
    
    func configureCollectionViewOnLoad() {
        let nibName = UINib(nibName: "GalleryCell", bundle:Bundle.main)
        galleryCollectionView.register(nibName, forCellWithReuseIdentifier: cellIdentifiers.galleryCell)
        galleryCollectionView.alwaysBounceVertical = true
        galleryCollectionView.allowsMultipleSelection = true
        galleryCollectionView.indicatorStyle = .white
    }
    
    func getGalleryPhotoOnLoad() {
        viewModel.getGallery()
    }
    
    func selectedPhotoAtIndex(index: IndexPath, cell: GalleryCell) {
//        let currentPhoto = viewModel.photos[index]
//        let galleryPreview = INSPhotosViewController(photos: viewModel.photos, initialPhoto: currentPhoto, referenceView: cell)
//        galleryPreview.referenceViewForPhotoWhenDismissingHandler = { [weak self] photo in
//            if let index = self?.viewModel.photos.index(where: {$0 === photo}) {
//                let indexPath = NSIndexPath(row: index, section: 0)
//                return self?.galleryCollectionView.cellForItem(at: indexPath as IndexPath) as? GalleryCell
//            }
//            return nil
//        }
//        present(galleryPreview, animated: true, completion: nil)
        
        let mainStoryboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil)
        let controller  = mainStoryboard.instantiateViewController(withIdentifier: "PhotoView") as! PhotoViewController
        controller.selectedIndex = index
        
        let vm = PhotoViewViewModel(items: viewModel.items)
        controller.viewModel = vm
        
        navigationController?.pushViewController(controller, animated: true)
    }
    
    // MARK: Selector Event
    @IBAction func clickUploadButton(_ sender: Any) {
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.photoLibrary) {
//            imagePickerController.delegate = self
//            self.present(imagePickerController, animated: true, completion: nil)
            
            gallery = GalleryController()
            gallery.delegate = self
            present(gallery, animated: true, completion: nil)
        }
        
        
        /*
        let alertController = UIAlertController(title: "", message: "Import From", preferredStyle: .actionSheet)
        
        let libraryAction = UIAlertAction(title: "Photo Library", style: .default) { (alert) in
            if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.photoLibrary) {
                let imagePickerController = ImagePickerController()
                imagePickerController.delegate = self
                self.present(imagePickerController, animated: true, completion: nil)
            }
        }
        
        let cameraAction = UIAlertAction(title: "Camera", style: .default) { (alert) in
            if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.camera) {
                let imagePicker = UIImagePickerController()
                imagePicker.delegate = self
                imagePicker.sourceType = UIImagePickerControllerSourceType.camera;
                imagePicker.allowsEditing = false
                self.present(imagePicker, animated: true, completion: nil)
            }
        }
        
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: nil)
        
        alertController.addAction(libraryAction)
        alertController.addAction(cameraAction)
        alertController.addAction(cancelAction)
        
        self.present(alertController, animated: true, completion: nil)
        */
    }
    @IBAction func clickEditMode(_ sender: Any) {
        isEditMode = !isEditMode
        UIView.animate(withDuration: 0.3) {
            var rect = self.toolBar.frame
            if self.isEditMode {
                rect.origin.y -= rect.size.height
                self.tabBarController?.tabBar.frame.origin.y += (self.tabBarController?.tabBar.frame.size.height)!
            } else {
                rect.origin.y += rect.size.height
                self.tabBarController?.tabBar.frame.origin.y -= (self.tabBarController?.tabBar.frame.size.height)!
            }
            self.toolBar.frame = rect
            
            self.addPhotoButton.isHidden = self.isEditMode
        }
        
        if isEditMode {
            title = "Select Photos"
            navigationItem.setHidesBackButton(true, animated: false)
            
            let barButton = UIBarButtonItem(barButtonSystemItem: .done, target: self, action: #selector(clickEditMode(_:)))
            navigationItem.rightBarButtonItem = barButton
        } else {
            title = viewModel.titleAlbum
            navigationItem.setHidesBackButton(false, animated: false)
            
            let barButton = UIBarButtonItem(barButtonSystemItem: .edit, target: self, action: #selector(clickEditMode(_:)))
            navigationItem.rightBarButtonItem = barButton
            
            galleryCollectionView.deselectAllItems(animated: false)
        }
    }
    
    @IBAction func clickSelectAllButton(_ sender: Any) {
        if isEditMode {
            galleryCollectionView.selectAllItems(section: 0, animated: false)
        }
    }
    
    @IBAction func clickExportButton(_ sender: Any) {
        
    }
    
    @IBAction func clickMoveButton(_ sender: Any) {
        
    }
    
    @IBAction func clickDeleteButton(_ sender: Any) {
        
    }
    

    // GalleryPhotoViewModelDelegate
    func reloadGallery() {
        progressRing.isHidden = true
        progressRing.setProgress(value: 0, animationDuration: 0)
        galleryCollectionView.reloadData()

        let numberItems = galleryCollectionView.numberOfItems(inSection: 0)
        if numberItems > 0 {
            galleryCollectionView.scrollToItem(at: NSIndexPath.init(row:(galleryCollectionView.numberOfItems(inSection: 0)) - 1, section: 0) as IndexPath,
                                               at: UICollectionViewScrollPosition.bottom,
                                               animated: true)
        }
    }

    func updateProgressRing(value: CGFloat) {
        
        DispatchQueue.main.async { 
            self.progressRing.setProgress(value: value, animationDuration: 0.3)
        }
    }
}


extension GalleryPhotoViewController: GalleryControllerDelegate {
    func galleryController(_ controller: GalleryController, didSelectImages images: [UIImage]) {
        DispatchQueue.main.async { 
            controller.dismiss(animated: true, completion: nil)
            self.gallery = nil
            self.progressRing.isHidden = false
        }

        var assets = [PHAsset]()
        for image in Cart.shared.images {
            let asset = image.asset
            assets.append(asset);
        }

        let when = DispatchTime.now() + 0.5 // change 2 to desired number of seconds
        DispatchQueue.global().asyncAfter(deadline: when) { 
            // Your code with delay
            self.viewModel.uploadImageToCoreData(images: images, assets: assets)
        }
    }
    
    func galleryController(_ controller: GalleryController, didSelectVideo video: Video) {
        DispatchQueue.main.async {
            controller.dismiss(animated: true, completion: nil)
            self.gallery = nil
            self.progressRing.isHidden = false
        }
        
        video.fetchAVAsset { (avasset) in
            self.viewModel.uploadVideoToCoreData(video: video, avasset: avasset!)
        }
    }
    
    func galleryController(_ controller: GalleryController, requestLightbox images: [UIImage]) {
        
    }
    
    func galleryControllerDidCancel(_ controller: GalleryController) {
        controller.dismiss(animated: true, completion: nil)
        gallery = nil
    }
}

extension GalleryPhotoViewController: HeroViewControllerDelegate {
    func heroWillStartAnimatingTo(viewController: UIViewController) {
        if (viewController as? GalleryPhotoViewController) != nil {
            galleryCollectionView.heroModifiers = [.cascade(delta:0.015, direction:.bottomToTop, delayMatchedViews:true)]
        } else if (viewController as? PhotoViewController) != nil {
            let cell = galleryCollectionView.cellForItem(at: galleryCollectionView.indexPathsForSelectedItems!.first!)!
            galleryCollectionView.heroModifiers = [.cascade(delta: 0.015, direction: .radial(center: cell.center), delayMatchedViews: true)]
            navigationController?.heroNavigationAnimationType = .fade
        } else {
            galleryCollectionView.heroModifiers = [.cascade(delta:0.015)]
            navigationController?.heroNavigationAnimationType = .pull(direction: .right)
        }
    }
    func heroWillStartAnimatingFrom(viewController: UIViewController) {
        view.heroModifiers = nil
        if (viewController as? GalleryPhotoViewController) != nil {
            galleryCollectionView.heroModifiers = [.cascade(delta:0.015), .delay(0.25)]
            navigationController?.heroNavigationAnimationType = .fade
        } else if (viewController as? PhotoViewController) != nil {
            navigationController?.heroNavigationAnimationType = .fade
        } else {
            galleryCollectionView.heroModifiers = [.cascade(delta:0.015)]
            addPhotoButton.heroModifiers = [.fade]
            navigationController?.heroNavigationAnimationType = .push(direction: .left)
        }
        if let vc = viewController as? PhotoViewController,
            let originalCellIndex = vc.selectedIndex,
            let currentCellIndex = vc.collectionView?.indexPathsForVisibleItems[0],
            let targetAttribute = galleryCollectionView.layoutAttributesForItem(at: currentCellIndex) {
            galleryCollectionView.heroModifiers = [.cascade(delta:0.015, direction:.inverseRadial(center:targetAttribute.center))]
            if !galleryCollectionView.indexPathsForVisibleItems.contains(currentCellIndex) {
                // make the cell visible
                galleryCollectionView.scrollToItem(at: currentCellIndex,
                                            at: originalCellIndex < currentCellIndex ? .bottom : .top,
                                             animated: false)
            }
        }
    }
}

