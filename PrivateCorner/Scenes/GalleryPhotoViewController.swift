//
//  GalleryPhotoViewController.swift
//  PrivateCorner
//
//  Created by a on 3/30/17.
//  Copyright (c) 2017 MrAChen. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//

import UIKit
import Photos
//import ImagePicker


class GalleryPhotoViewController: UIViewController, GalleryPhotoViewModelDelegate {

//    let imagePickerController = ImagePickerController()
    var gallery: GalleryController!
    var viewModel: GalleryPhotoViewModel!
    
    @IBOutlet weak var galleryCollectionView: UICollectionView!
    
    // MARK: Object lifecycle
    
    struct cellIdentifiers {
        static let galleryCell = "galleryCell"
    }
    
    struct cellLayout {
        static let itemsPerRow: CGFloat = 4
        static let sectionInsets: UIEdgeInsets = UIEdgeInsets(top: 2, left: 2, bottom: 0, right: 2)
    }
    
    override func awakeFromNib() {
        super.awakeFromNib()

    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configureSubviews()
        configureCollectionViewOnLoad()
        getGalleryPhotoOnLoad()
    }
    
    // MARK: Event handling
    func configureSubviews() {
        self.title = "Gallery"
    }
    
    func configureCollectionViewOnLoad() {
        let nibName = UINib(nibName: "GalleryCell", bundle:Bundle.main)
        galleryCollectionView.register(nibName, forCellWithReuseIdentifier: cellIdentifiers.galleryCell)
    }
    
    func getGalleryPhotoOnLoad() {
        viewModel.getGallery()
    }
    
    @IBAction func clickUploadButton(_ sender: Any) {
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.photoLibrary) {
//            imagePickerController.delegate = self
//            self.present(imagePickerController, animated: true, completion: nil)
            
            gallery = GalleryController()
            gallery.delegate = self
            present(gallery, animated: true, completion: nil)
        }
        
        
        /*
        let alertController = UIAlertController(title: "", message: "Import From", preferredStyle: .actionSheet)
        
        let libraryAction = UIAlertAction(title: "Photo Library", style: .default) { (alert) in
            if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.photoLibrary) {
                let imagePickerController = ImagePickerController()
                imagePickerController.delegate = self
                self.present(imagePickerController, animated: true, completion: nil)
            }
        }
        
        let cameraAction = UIAlertAction(title: "Camera", style: .default) { (alert) in
            if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.camera) {
                let imagePicker = UIImagePickerController()
                imagePicker.delegate = self
                imagePicker.sourceType = UIImagePickerControllerSourceType.camera;
                imagePicker.allowsEditing = false
                self.present(imagePicker, animated: true, completion: nil)
            }
        }
        
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: nil)
        
        alertController.addAction(libraryAction)
        alertController.addAction(cameraAction)
        alertController.addAction(cancelAction)
        
        self.present(alertController, animated: true, completion: nil)
        */
    }
    
    func selectedPhotoAtIndex(index: Int, cell: GalleryCell) {
        let currentPhoto = viewModel.photos[index]
        let galleryPreview = INSPhotosViewController(photos: viewModel.photos, initialPhoto: currentPhoto, referenceView: cell)
        galleryPreview.referenceViewForPhotoWhenDismissingHandler = { [weak self] photo in
            if let index = self?.viewModel.photos.index(where: {$0 === photo}) {
                let indexPath = NSIndexPath(row: index, section: 0)
                return self?.galleryCollectionView.cellForItem(at: indexPath as IndexPath) as? GalleryCell
            }
            return nil
        }
        present(galleryPreview, animated: true, completion: nil)
    }

    func fetchImages(_ assets: [PHAsset]) -> [String] {
        var filenames = [String]()
        let imageManager = PHImageManager.default()
        let requestOptions = PHImageRequestOptions()
        requestOptions.isSynchronous = true
        let size: CGSize = CGSize(width: 720, height: 1280)
        
        for asset in assets {
            imageManager.requestImage(for: asset, targetSize: size, contentMode: .aspectFill, options: requestOptions) { image, info in
                if let info = info {
                    if let filename = (info["PHImageFileURLKey"] as? NSURL)?.lastPathComponent {
                        //do sth with file name
                        filenames.append(filename)
                    }
                    
                }
            }
        }
        return filenames
    }

    // GalleryPhotoViewModelDelegate
    func reloadGallery() {
        galleryCollectionView.reloadData()
        var contentSize = galleryCollectionView.contentSize
        if contentSize.height < kScreenHeight {
            contentSize.height = kScreenHeight
            galleryCollectionView.contentSize = contentSize
        }
    }

}


extension GalleryPhotoViewController: UIImagePickerControllerDelegate {

}

extension GalleryPhotoViewController: UINavigationControllerDelegate {
    
}

//extension GalleryPhotoViewController: ImagePickerDelegate {
//    func wrapperDidPress(_ imagePicker: ImagePickerController, images: [UIImage]) {
//        
//    }
//
//    func doneButtonDidPress(_ imagePicker: ImagePickerController, images: [UIImage]) {
//        var filenames = [String]()
//        let assets = imagePicker.stack.assets
//        
//        let imageManager = PHImageManager.default()
//        let requestOptions = PHImageRequestOptions()
//        requestOptions.isSynchronous = true
//        let size: CGSize = CGSize(width: 720, height: 1280)
//        
//        for asset in assets {
//            imageManager.requestImage(for: asset, targetSize: size, contentMode: .aspectFill, options: requestOptions) { image, info in
//                if let info = info {
//                    if let filename = (info["PHImageFileURLKey"] as? NSURL)?.lastPathComponent {
//                        //do sth with file name
//                        filenames.append(filename)
//                    }
//                    
//                }
//            }
//        }
//        
//        uploadImageToCoreData(images: images, filenames: filenames)
//    }
//    
//    func cancelButtonDidPress(_ imagePicker: ImagePickerController) {
//        
//    }
//}

extension GalleryPhotoViewController: GalleryControllerDelegate {
    func galleryController(_ controller: GalleryController, didSelectImages images: [UIImage]) {
        var assets = [PHAsset]()
        for image in Cart.shared.images {
            let asset = image.asset
            assets.append(asset);
        }
        
        let filenames = fetchImages(assets)
        viewModel.uploadImageToCoreData(images: images, filenames: filenames)
        
        controller.dismiss(animated: true, completion: nil)
        gallery = nil
    }
    
    func galleryController(_ controller: GalleryController, didSelectVideo video: Video) {
        controller.dismiss(animated: true, completion: nil)
        gallery = nil
    }
    
    func galleryController(_ controller: GalleryController, requestLightbox images: [UIImage]) {
        
    }
    
    func galleryControllerDidCancel(_ controller: GalleryController) {
        controller.dismiss(animated: true, completion: nil)
        gallery = nil
    }
}
